#!/usr/bin/env python
import os
import requests
import subprocess
import json
import time
import argparse
import sys
import zipfile
import io

BASE_BRANCH="main"

# Get the GitHub repository information from the current Git environment
def get_github_repo_info():
    remote_url = subprocess.check_output(["git", "config", "--get", "remote.origin.url"]).decode("utf-8").strip()
    if not "github" in remote_url:
        raise Exception("This is not a GitHub repository.")
    
    if "git@github" in remote_url:
        parts = remote_url.split(":")
        if len(parts) == 2:
            parts = parts[-1].split("/")
    else:
        parts = remote_url.split("/")[-2:]
    if len(parts) != 2:
        raise Exception("Invalid GitHub repository URL.")
    
    owner, repo_name = parts
    repo_name = repo_name.replace(".git", "")
    return owner, repo_name

def create_or_update_pr(owner, repo_name, github_token, current_branch, base_branch, title, body=""):
    # Check if there's an existing PR with the same head and base branches
    if current_branch != "main" and current_branch != "master":
        pr_number = check_existing_pr(owner, repo_name, github_token, current_branch, base_branch)
        
        subprocess.run(["git", "push", "origin", current_branch])
        if pr_number:
            print(f"PR exists for '{current_branch}': https://github.com/{owner}/{repo_name}/pull/{pr_number}")
            # If an existing PR exists, simply push changes and check its current state
            check_pr_status(owner, repo_name, github_token, current_branch)
        else:
            # If no existing PR, create a new one
            create_new_pr(owner, repo_name, github_token, current_branch, base_branch, title, body)
    else:
        subprocess.run(["git", "push", "origin", current_branch])

def check_existing_pr(owner, repo_name, github_token, head_branch, base_branch):
    url = f"https://api.github.com/repos/{owner}/{repo_name}/pulls"
    headers = {
        "Authorization": f"Bearer {github_token}",
        "Accept": "application/vnd.github.v3+json",
    }
    params = {
        "head": f"{owner}:{head_branch}",
        "base": base_branch,
    }
    response = requests.get(url, headers=headers, params=params)
    pr_data = response.json()
    if response.status_code != 200 or len(pr_data) <= 0:
        print(f"Can't find existing PR: {response.status_code}", file=sys.stderr)
        return False
    number = pr_data[0]['number']
    return number

def create_new_pr(owner, repo_name, github_token, head_branch, base_branch, title, body=""):
    url = f"https://api.github.com/repos/{owner}/{repo_name}/pulls"
    headers = {
        "Authorization": f"Bearer {github_token}",
        "Accept": "application/vnd.github.v3+json",
    }
    data = {
        "title": title,
        "head": head_branch,
        "base": base_branch,
    }
    response = requests.post(url, headers=headers, json=data)
    pr_data = response.json()
    if "number" in pr_data:
        pr_number = pr_data["number"]
    
        print(f"PR created: https://github.com/{owner}/{repo_name}/pull/{pr_number}")
        check_pr_status(owner, repo_name, github_token, head_branch)
    else:
        print(f"PR not created for: '{owner}/{repo_name}' from '{head_branch}' to '{base_branch}': {response.status_code} {response.json()['message']}", file=sys.stderr)

def check_pr_status(owner, repo_name, github_token, head_branch):
    # Check the status of GitHub Actions runs associated with the PR
    url = f"https://api.github.com/repos/{owner}/{repo_name}/actions/runs?branch={head_branch}"
    params = {}
    
    headers = {
        "Authorization": f"{github_token}",
        "Accept": "application/vnd.github.v3+json",
    }
    
    while True:
        response = requests.get(url, headers=headers, params=params)
        runs_data = response.json()
        
        # Find the latest workflow run associated with the PR
        latest_run = None
        if "workflow_runs" in runs_data:
            for run in runs_data["workflow_runs"]:
                if run["pull_requests"]:
                    latest_run = run
                    break
        
        if latest_run:
            print(f"Workflow name: {latest_run['name']}")
            print(f"Workflow run URL: {latest_run['html_url']}")
            print(f"Latest GHA run status: {latest_run['status']}")
            
            # Stream the logs to standard output
            if latest_run['status'] in ["success", "failure", "completed"]:
                break
        else:
            print(f"No GHA runs found for the PR for '{head_branch}'")
            break


def main():
    parser = argparse.ArgumentParser(description="Create or update a Pull Request on GitHub.")
    parser.add_argument("-m", "--message", help="Comment message for the Pull Request or Commit", default="")
    args = parser.parse_args()

    # Determine the GitHub repository information
    REPO_OWNER, REPO_NAME = get_github_repo_info()
    
    # Use the GitHub API token from the environment variable
    GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN")
    if not GITHUB_TOKEN:
        raise Exception("GitHub token not found in the environment variable $GITHUB_TOKEN")
    
    # Make changes to the code as needed
    # You can use subprocess to run commands to modify files in your project
    
    # Commit your changes
    base_branch = BASE_BRANCH
    res = subprocess.run(
        ["git", "rev-parse", "--verify", f"refs/heads/${BASE_BRANCH}"],  
        stdout = subprocess.DEVNULL,
        stderr = subprocess.DEVNULL
    )
    if res == 0:
        base_branch = "master"
    subprocess.run(["git", "add", "."])
    res = subprocess.run(["git", "commit", "-m", args.message])
   
    if res != 0: 
        # Push the current branch to GitHub
        current_branch = subprocess.check_output(["git", "branch", "--show-current"]).decode("utf-8").strip()
        
        # Create or update the PR
        create_or_update_pr(REPO_OWNER, REPO_NAME, GITHUB_TOKEN, current_branch, base_branch, args.message)

if __name__ == "__main__":
    main()
