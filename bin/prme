#!/usr/bin/env python
import os
import requests
import subprocess
import json
import time
import argparse
import sys
import zipfile
import io

BASE_BRANCH="main"

# Get the GitHub repository information from the current Git environment
def get_github_repo_info():
    remote_url = subprocess.check_output(["git", "config", "--get", "remote.origin.url"]).decode("utf-8").strip()
    if not "github" in remote_url:
        raise Exception("This is not a GitHub repository.")
    
    if "git@github" in remote_url:
        parts = remote_url.split(":")
        if len(parts) == 2:
            parts = parts[-1].split("/")
    else:
        parts = remote_url.split("/")[-2:]
    if len(parts) != 2:
        raise Exception("Invalid GitHub repository URL.")
    
    owner, repo_name = parts
    repo_name = repo_name.replace(".git", "")
    print(owner, repo_name)
    return owner, repo_name

def create_or_update_pr(owner, repo_name, github_token, current_branch, base_branch, title, body=""):
    # Check if there's an existing PR with the same head and base branches
    pr_exists = check_existing_pr(owner, repo_name, github_token, current_branch, base_branch)
    
    if pr_exists:
        # If an existing PR exists, simply push changes and check its current state
        subprocess.run(["git", "push", "origin", current_branch])
        check_pr_status(owner, repo_name, github_token, current_branch)
    else:
        # If no existing PR, create a new one
        create_new_pr(owner, repo_name, github_token, current_branch, base_branch, title, body)

def check_existing_pr(owner, repo_name, github_token, head_branch, base_branch):
    url = f"https://api.github.com/repos/{owner}/{repo_name}/pulls"
    headers = {
        "Authorization": f"Bearer {github_token}",
        "Accept": "application/vnd.github.v3+json",
    }
    params = {
        "head": f"{owner}:{head_branch}",
        "base": base_branch,
    }
    response = requests.get(url, headers=headers, params=params)
    pr_data = response.json()
    
    return len(pr_data) > 0

def create_new_pr(owner, repo_name, github_token, head_branch, base_branch, title, body=""):
    url = f"https://api.github.com/repos/{owner}/{repo_name}/pulls"
    headers = {
        "Authorization": f"Bearer {github_token}",
        "Accept": "application/vnd.github.v3+json",
    }
    data = {
        "title": title,
        "head": head_branch,
        "base": base_branch,
        "body": body,
    }
    response = requests.post(url, headers=headers, json=data)
    pr_data = response.json()
    if "number" in pr_data:
        pr_number = pr_data["number"]
    
        print(f"PR created: {pr_number}")
        check_pr_status(owner, repo_name, github_token, head_branch)
    else:
        print(response)
        print("No PR created... commiting to 'main'?")

def check_pr_status(owner, repo_name, github_token, head_branch):
    # Check the status of GitHub Actions runs associated with the PR
    url = f"https://api.github.com/repos/{owner}/{repo_name}/actions/runs?branch={head_branch}"
    params = {}
    
    headers = {
        "Authorization": f"Bearer {github_token}",
        "Accept": "application/vnd.github.v3+json",
    }
    
    while True:
        response = requests.get(url, headers=headers, params=params)
        runs_data = response.json()
        
        # Find the latest workflow run associated with the PR
        latest_run = None
        if "workflow_runs" in runs_data:
            for run in runs_data["workflow_runs"]:
                if run["pull_requests"]:
                    latest_run = run
                    break
        
        if latest_run:
            print(f"Workflow name: {latest_run['name']}")
            print(f"Workflow run URL: {latest_run['html_url']}")
            print(f"Latest GHA run status: {latest_run['status']}")
            
            # Stream the logs to standard output
            if latest_run['status'] in ["success", "failure", "completed"]:
                break
        else:
            print(f"No GHA runs found for the PR for '{head_branch}'")
            break


def main():
    parser = argparse.ArgumentParser(description="Create or update a Pull Request on GitHub.")
    parser.add_argument("-m", "--message", help="Comment message for the Pull Request or Commit", default="")
    args = parser.parse_args()

    # Determine the GitHub repository information
    REPO_OWNER, REPO_NAME = get_github_repo_info()
    
    # Use the GitHub API token from the environment variable
    GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN")
    if not GITHUB_TOKEN:
        raise Exception("GitHub token not found in the environment variable $GITHUB_TOKEN")
    
    # Make changes to the code as needed
    # You can use subprocess to run commands to modify files in your project
    
    # Commit your changes
    subprocess.run(["git", "add", "."])
    subprocess.run(["git", "commit", "-m", args.message])
    
    # Push the current branch to GitHub
    current_branch = subprocess.check_output(["git", "branch", "--show-current"]).decode("utf-8").strip()
    
    # Create or update the PR
    create_or_update_pr(REPO_OWNER, REPO_NAME, GITHUB_TOKEN, current_branch, BASE_BRANCH, args.message)

if __name__ == "__main__":
    main()
